# ===== App =====
spring.application.name=chat
# Render が注入する PORT を使う（ローカルは 8080）
server.port=${PORT:8080}
# 逆プロキシ配下で https 判定が正しくなる
server.forward-headers-strategy=framework

# ===== DB =====
# 本番(Render)では環境変数から、ローカルは従来の値を既定に
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/chat}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}

# ===== 初期データ投入 =====
# data.sql 実行: 本番では重複を避けるため無効化推奨（環境変数で切替）
spring.sql.init.mode=${SQL_INIT_MODE:always}
# Hibernate のスキーマ作成後に data.sql を流す
spring.jpa.defer-datasource-initialization=true

# ===== JPA =====
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Tokyo

# ===== Actuator (Render のヘルスチェック用) =====
management.endpoints.web.exposure.include=health,info

# ===== Logging（本番は静かめに） =====
logging.level.org.springframework.security=${LOG_LEVEL_SECURITY:INFO}
logging.level.org.springframework.web=${LOG_LEVEL_WEB:INFO}
logging.level.com.example=${LOG_LEVEL_APP:INFO}
logging.level.org.hibernate.SQL=${LOG_LEVEL_SQL:INFO}

# ===== JWT =====
# 本番は必ず環境変数 JWT_SECRET を設定（強いランダム文字列）
jwt.secret=${JWT_SECRET:dev-secret-please-change-at-least-32chars-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
jwt.issuer=chat-app
jwt.exp-minutes=60
